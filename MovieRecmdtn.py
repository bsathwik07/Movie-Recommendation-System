# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TlV_vzSPdDYMRd9M0H2tIcVdhXQVP0lA
"""

import pandas as pd
import numpy as np
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighborsk

# Loading movies and ratings data
movies_df = pd.read_csv('movies.csv', usecols=['movieId', 'title'], dtype={'movieId': 'int32', 'title': 'str'})
ratings_df = pd.read_csv('ratings.csv', usecols=['userId', 'movieId', 'rating'],
                         dtype={'userId': 'int32', 'movieId': 'int32', 'rating': 'float32'})

# Merging movies and ratings data
merged_df = pd.merge(ratings_df, movies_df, on='movieId')

# Filtering out movies with missing data
filtered_movie_ratings = merged_df.dropna(axis=0, subset=['title'])

# Calculating total rating counts per movie
movie_rating_count = (filtered_movie_ratings.
                      groupby(by=['title'])['rating'].
                      count().
                      reset_index().
                      rename(columns={'rating': 'totalRatingCount'})
                      [['title', 'totalRatingCount']]
                      )

# Merging movie ratings with total rating counts
rating_with_total_rating_count = filtered_movie_ratings.merge(movie_rating_count, left_on='title', right_on='title', how='left')

# Setting display format for float values
pd.set_option('display.float_format', lambda x: '%.3f' % x)

# Displaying summary statistics for total rating counts
print(movie_rating_count['totalRatingCount'].describe())

popularity_threshold = 50
rating_popular_movie = rating_with_total_rating_count[rating_with_total_rating_count['totalRatingCount'] >= popularity_threshold]
rating_popular_movie.head()

# Creating a pivot matrix for movie features
movie_features_matrix = rating_popular_movie.pivot_table(index='title', columns='userId', values='rating').fillna(0)

# Converting the pivot matrix to a sparse matrix
movie_features_sparse_matrix = csr_matrix(movie_features_matrix.values)

# Building a Nearest Neighbors model
knn_model = NearestNeighbors(metric='cosine', algorithm='brute')
knn_model.fit(movie_features_sparse_matrix)

# Randomly selecting a query index
query_index = np.random.choice(movie_features_matrix.shape[0])

# Finding nearest neighbors for the query index
distances, indices = knn_model.kneighbors(movie_features_matrix.iloc[query_index, :].values.reshape(1, -1), n_neighbors=6)

# Displaying movie recommendations for the query index
for i in range(0, len(distances.flatten())):
    if i == 0:
        print('Recommendations for {0}:\n'.format(movie_features_matrix.index[query_index]))
    else:
        print('{0}: {1}, with distance of {2}:'.format(i, movie_features_matrix.index[indices.flatten()[i]], distances.flatten()[i]))